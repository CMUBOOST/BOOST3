#include "ros/ros.h"
#include "std_msgs/Float32.h"
#include "sensor_msgs/JointState.h"
#include "sensor_msgs/Joy.h"
#include <geometry_msgs/TwistWithCovarianceStamped.h>
#include <geometry_msgs/Twist.h>
#include <urdf/model.h>

#include "lookup.hpp"
#include "group.hpp"
#include "group_command.hpp"

#include <sstream>
#include <string>
#include <vector>
#include <math.h>

#include "sensor_msgs/Imu.h"

const float MAX_RAW_VELOCITY = 9; // radians per second

// const float MAX_RAW_VELOCITY = 9.35;
const float WHEELBASE = 0.6985; // meters
const float TIRE_RADIUS = 0.18415; //meters

const float MAX_LIN_VEL = 1.0; // m/s
const float MAX_ANG_VEL = 0.4; // m/s
 

// TODO: Make rosparam in future! Boost_odom also uses these values!
const float TRACK = 0.43457; // m
const float YAW_RATE_MULTIPLIER = 0.255; 

const int ARM_GEAR_RATIO = 48.33; //TODO: UPDATE THIS NUMBER

/**
 * A function to publish an IMU msg
 */
void send_imu_message(const hebi::Feedback& fbk, const ros::Publisher& pub, const std::string &jointName)
{
  // NOTE: We set first cov element to -1 if doesn't exist per message docs
  // ( http://docs.ros.org/api/sensor_msgs/html/msg/Imu.html )
 
  sensor_msgs::Imu msg;
  msg.header.stamp = ros::Time::now();
  msg.header.frame_id = jointName;

  // Accelerometers
  if (fbk.imu().accelerometer().has())
  {
    hebi::Vector3f accel = fbk.imu().accelerometer().get();
    msg.linear_acceleration.x = accel.getX();
    msg.linear_acceleration.y = accel.getY();
    msg.linear_acceleration.z = accel.getZ();
  }
  else
  {
    msg.linear_acceleration_covariance[0] = -1;
  }
  // Gyros
  if (fbk.imu().gyro().has())
  {
    hebi::Vector3f gyro = fbk.imu().gyro().get();
    msg.angular_velocity.x = gyro.getX();
    msg.angular_velocity.y = gyro.getY();
    msg.angular_velocity.z = gyro.getZ();
  }
  else
  {
    msg.angular_velocity_covariance[0] = -1;
  }
  // Orientation
  msg.orientation_covariance[0] = -1;
  // Publish
  pub.publish(msg);
}


/**
 * A short function to get name and family from a name split with a "|".
 */
bool split(const std::string &orig, std::string &name, std::string &family)
{
  std::stringstream ss(orig);
  if (!std::getline(ss, name, '|'))
    return false;
  std::getline(ss, family);
  return true;
}

// Global 'group' pointer so we can access this in a callback...ugly, but until
// we class-ify the node this will work.
hebi::Group* group_g = NULL;

/**
 * Does traditional skid steer commands for the wheels
 */
int sendWheelSkidCommands(double velocityLeft, double velocityRight)
{
  // std::cout << "Skid Command Velocity  -  Left:" << velocityLeft << "\t Right:" << velocityRight << std::endl;

  // Sanity check velocity.
  if (fabs(velocityLeft) > MAX_RAW_VELOCITY) {
    ROS_INFO("Velocity (skid-left) out of range\n");
    return(-1);
  }
  // Sanity check velocity.
  if (fabs(velocityRight) > MAX_RAW_VELOCITY) {
    ROS_INFO("Velocity (skid-right) out of range\n");
    return(-1);
  }

  double wheel_front_left, wheel_front_right, wheel_rear_left, wheel_rear_right;
  if (((velocityLeft == 0) || (velocityLeft == -0)) && ((velocityRight == 0) || (velocityRight == -0))) {
    wheel_front_left = NAN;
    wheel_front_right = NAN;
    wheel_rear_left =  NAN;
    wheel_rear_right = NAN;
  } else {
    wheel_front_left = -velocityLeft;
    wheel_front_right = 1 * velocityRight;
    wheel_rear_left =  -velocityLeft;
    wheel_rear_right = 1 * velocityRight;
  }

  hebi::GroupCommand cmd(7);
  cmd[0].actuator().velocity().set(wheel_front_left);
  cmd[1].actuator().velocity().set(wheel_rear_left);
  cmd[2].actuator().velocity().set(wheel_front_right);
  cmd[3].actuator().velocity().set(wheel_rear_right);
  cmd[4].actuator().velocity().set(NAN);
  cmd[5].actuator().velocity().set(NAN);
  cmd[6].actuator().velocity().set(NAN);
  group_g->sendCommand(cmd);
  return(1);
}

/**
 * Callback for joystick commands
 */

/**

void joyCallback(const sensor_msgs::Joy::ConstPtr& msg)
{
double velocityR, velocityL;

  // Analog inputs
  const int LEFT_UP = 1;
  const int RIGHT_UP = 4;

  // Discrete inputs
  const int TOP_RIGHT_BUTTON = 5;
  const int TOP_LEFT_BUTTON = 4;
  const int A_BUTTON = 0;

  const double DEADBAND = 0.02;

  // High speed, requires button to be depressed to send commands
  if (msg->buttons[TOP_LEFT_BUTTON] > 0) {
    velocityL = msg->axes[LEFT_UP] * MAX_RAW_VELOCITY;
    if (std::abs(msg->axes[LEFT_UP]) < DEADBAND)  {
      velocityL = 0;
      }
    velocityR = msg->axes[RIGHT_UP] * MAX_RAW_VELOCITY;
    if (std::abs(msg->axes[RIGHT_UP]) < DEADBAND)  {
      velocityR = 0;
      }
  // Low speed, requires top right button to be depressed to send commands
  } else if (msg->buttons[TOP_RIGHT_BUTTON] > 0) {
    velocityL = msg->axes[LEFT_UP] * MAX_RAW_VELOCITY * 0.25;
    if (std::abs(msg->axes[LEFT_UP]) < DEADBAND)  {
      velocityL = 0;
      }
    velocityR = msg->axes[RIGHT_UP] * MAX_RAW_VELOCITY * 0.25;
    if (std::abs(msg->axes[RIGHT_UP]) < DEADBAND)  {
      velocityR = 0;
      }
  // Driving config where holding A and pushing the left joystick will allow straight movement only.
  } else if (msg->buttons[A_BUTTON] > 0) {
    velocityL = msg->axes[LEFT_UP] * MAX_RAW_VELOCITY;
    velocityR = msg->axes[LEFT_UP] * MAX_RAW_VELOCITY;
    if (std::abs(msg->axes[LEFT_UP]) < DEADBAND) {
      velocityL = 0;
      velocityR = 0;
      }  
  } else {
    velocityR = 0;
    velocityL = 0;
  }

  sendWheelSkidCommands(velocityL, velocityR);
}

  */

/**
 * Callback for driving commands with skid steer
 */
void cmdvelCallback(const geometry_msgs::Twist::ConstPtr& msg)
{

  double velL = 0;
  double velR = 0;

  std::cout << "got into the cmdvelCallback!!!" << std::endl;

  // Calculate required velocity in each set of wheels to achieve input twist, still linear
  velR = (msg->angular.z * TRACK + 2 * msg->linear.x) / 2;
  velL = 2 * msg->linear.x - (msg->angular.z * TRACK + 2 * msg->linear.x) / 2;

  // Convert linear velocity to angular velocity for the motor controllers
  velR = velR / TIRE_RADIUS;
  velL = velL / TIRE_RADIUS;

  std::cout << "velR is : " << velR << "     velL is : " << velL << std::endl;
  std::cout << (msg->angular.z * TRACK) << std::endl;

  // Ensure commanded velocity is below maximum
  if (velR > MAX_RAW_VELOCITY) {
    std::cout << " Right commanded velocity is greater than max allowed!" << std::endl;
    velR = MAX_RAW_VELOCITY;
    }
    if (velL > MAX_RAW_VELOCITY) {
    std::cout << " Left commanded velocity is greater than max allowed!" << std::endl;
    velL = MAX_RAW_VELOCITY;
    }
  // msg->linear.x, msg->angular.z
  // ADD CODE HERE TO TAKE THE DESIRED TWIST AND CALCULATE JOINT
  // COMMANDS REQUIRED TO ACHIEVE THAT TWIST USING KINEMATICS OF THE ROBOT,
  // POSSIBLY USING A LOOKUP TABLE FOR THE DELTA VELOCITIES OF THE WHEELS AS
  // DESCRIBED IN THE PAPER

  sendWheelSkidCommands(velL, velR);
}

/**
 * callback for joint commands (ie low level command for each axis)
 */
void commandCallback(const sensor_msgs::JointState::ConstPtr& msg)
{
  // TODO: check names instead of just length?
  if ((group_g->size() != msg->position.size() && msg->position.size() != 0) ||
      (group_g->size() != msg->velocity.size() && msg->velocity.size() != 0) ||
      (group_g->size() != msg->effort.size() && msg->effort.size() != 0))
  {
    ROS_INFO("Command length did not match group size.");
    std::cerr << "Command length did not match group size.";
    return;
  }
  hebi::GroupCommand cmd(group_g->size());
  for (int i = 0; i < msg->position.size(); i++)
    cmd[i].actuator().position().set(msg->position[i]);
  for (int i = 0; i < msg->velocity.size(); i++)
    cmd[i].actuator().velocity().set(msg->velocity[i]);
  for (int i = 0; i < msg->effort.size(); i++)
    cmd[i].actuator().torque().set(msg->effort[i]);
  group_g->sendCommand(cmd);
}

/**
 * This node publishes feedback from named joints in the URDF model on the
 * parameter server under "robot_description".
 */
int main(int argc, char **argv)
{
  /**
   * The ros::init() function needs to see argc and argv so that it can perform
   * any ROS arguments and name remapping that were provided at the command line. For programmatic
   * remappings you can use a different version of init() which takes remappings
   * directly, but for most command-line programs, passing argc and argv is the easiest
   * way to do it.  The third argument to init() is the name of the node.
   *
   * You must call one of the versions of ros::init() before using any other
   * part of the ROS system.
   */
  ros::init(argc, argv, "stalker_interface");

  /**
   * NodeHandle is the main access point to communications with the ROS system.
   * The first NodeHandle constructed will fully initialize this node, and the last
   * NodeHandle destructed will close down the node.
   */
  ros::NodeHandle n;

  // Get the names of non-fixed joints in the model:
  
  std::vector<std::string> joint_names = {"Front_Left_Drive", "Rear_Left_Drive", "Front_Right_Drive", "Rear_Right_Drive", "X-00021", "X-00022", "X-00023"};
  std::vector<std::string> family_names = {"BOOST", "BOOST", "BOOST", "BOOST", "BOOST-ARM", "BOOST-ARM", "BOOST-ARM"};
  //std::vector<std::string> joint_names = {"Front_Left_Drive", "Rear_Left_Drive", "Front_Right_Drive", "Rear_Right_Drive"};
  //std::vector<std::string> family_names = {"BOOST", "BOOST", "BOOST", "BOOST"};
  // std::vector<std::string> joint_names = {"Front_Left_Drive", "Rear_Left_Drive", "Front_Right_Drive"};
  // std::vector<std::string> family_names = {"BOOST", "BOOST", "BOOST"};


  /**
   * The advertise() function is how you tell ROS that you want to
   * publish on a given topic name. This invokes a call to the ROS
   * master node, which keeps a registry of who is publishing and who
   * is subscribing. After this advertise() call is made, the master
   * node will notify anyone who is trying to subscribe to this topic name,
   * and they will in turn negotiate a peer-to-peer connection with this
   * node.  advertise() returns a Publisher object which allows you to
   * publish messages on that topic through a call to publish().  Once
   * all copies of the returned Publisher object are destroyed, t"X-00021"he topic
   * will be automatically unadvertised.
   *
   * The second parameter to advertise() is the size of the message queue
   * used for publishing messages.  If messages are published more quickly
   * than we can send them, the number here specifies how many messages to
   * buffer up before throwing some away.
   */
  ros::Publisher joint_pub = n.advertise<sensor_msgs::JointState>("joint_states", 10);
  ros::Publisher twist_pub = n.advertise<geometry_msgs::TwistWithCovarianceStamped>("base/cmd_vel", 30);
  ros::Publisher imu_pubfl = n.advertise<sensor_msgs::Imu>("hebi/fl_imu/data", 30);
  ros::Publisher imu_pubrl = n.advertise<sensor_msgs::Imu>("hebi/rl_imu/data", 30);
  ros::Publisher imu_pubfr = n.advertise<sensor_msgs::Imu>("hebi/fr_imu/data", 30);
  ros::Publisher imu_pubrr = n.advertise<sensor_msgs::Imu>("hebi/rr_imu/data", 30);


  // Get the lookup and wait to populate (TODO: check for null?)
  hebi::Lookup lookup;
  sleep(2);
  lookup.printTable();

  // Get the group
  for (int i = 0; i < joint_names.size(); i++)
  {
    std::cout << "looking for: " << std::endl;
    std::cout << joint_names[i] << std::endl;
    std::cout << family_names[i] << std::endl;
  }
  std::unique_ptr<hebi::Group> group(lookup.getGroupFromNames(joint_names, family_names, 1000));
  if (!group)
  {
    ROS_INFO("Could not find modules on network! Quitting!");
    return -1;
  }
  // THIS IS A HACK to get around limited callback options for ROS subscribe call and the lack of a class for this node.
  group_g = group.get();

  std::cout << "Found modules!" << std::endl;
  ROS_INFO("Found modules!");

    /**
   * The subscribe() call is how you tell ROS that you want to receive messages
   * on a given topic.  This invokes a call to the ROS
   * master node, which keeps a registry of who is publishing and who
   * is subscribing. subscribe() returns a Subscriber object that you
   * must hold on to until you want to unsubscribe.  When all copies of the Subscriber
   * object go out of scope, this callback will automatically be unsubscribed from
   * this topic.
   *
   * The second parameter to the subscribe() function is the size of the message
   * queue.  If messages are arriving faster than they are being processed, this
   * is the number of messages that will be buffered up before beginning to throw
   * away the oldest ones.
   */
  ros::Subscriber sub_joint_command = n.subscribe("joint_commands", 1, commandCallback);
  ros::Subscriber sub_skid_vel = n.subscribe("twist_mux/cmd_vel", 1, cmdvelCallback);  
  // ros::Subscriber sub_cmd_joy = n.subscribe("joy", 1, joyCallback);

  hebi::GroupFeedback fbk(group->size());
  double period_s = 0.04;

  ros::Rate r(100.0);  // Publishing rate, in Hz
  while (ros::ok())
  {
  	if (group->requestFeedback(&fbk, 1000)) /* 1000 is timeout in ms */
  	{
      	sensor_msgs::JointState msg;
        geometry_msgs::TwistWithCovarianceStamped msg_twist;
        sensor_msgs::Imu msg_imu;

        std::vector<double> wheel_vel;

        msg.header.stamp = ros::Time::now();

        // Add feedback:
        for (int i = 0; i < joint_names.size(); i++)
        {
          msg.name.push_back(joint_names[i].c_str());
          if (fbk[i].actuator().position().has())
          {
            if ((i == 0) || (i == 1))
            {
              msg.position.push_back(-fbk[i].actuator().position().get());
            }
          else if(i == 5)
          {
            msg.position.push_back(fbk[i].actuator().position().get() / ARM_GEAR_RATIO);
          }
            else
            {
              msg.position.push_back(fbk[i].actuator().position().get());
            }

          }
          if (fbk[i].actuator().velocity().has())
          {
        	if ((i == 0) || (i == 1)) //left wheels
        	{
        		msg.velocity.push_back(-fbk[i].actuator().velocity().get());
        		wheel_vel.push_back(-fbk[i].actuator().velocity().get() * TIRE_RADIUS);
        	}
          else if(i == 5)
          {
            msg.velocity.push_back(fbk[i].actuator().velocity().get() / ARM_GEAR_RATIO);
          }
          else 
          	{
            	msg.velocity.push_back(fbk[i].actuator().velocity().get());
            	wheel_vel.push_back(fbk[i].actuator().velocity().get() * TIRE_RADIUS);
          	}
        	}
          if (fbk[i].actuator().torque().has())
            msg.effort.push_back(fbk[i].actuator().torque().get());

        }

        // Publish IMU topic from motor controller
        send_imu_message(fbk[0], imu_pubfl, joint_names[0].c_str()); 
        send_imu_message(fbk[1], imu_pubrl, joint_names[1].c_str()); 
        send_imu_message(fbk[2], imu_pubfr, joint_names[2].c_str()); 
        send_imu_message(fbk[3], imu_pubrr, joint_names[3].c_str()); 

        // CALCULATE KINEMATICS HERE, AND GENERATE TWIST, THIS IS NAIVE FOR A SKID-STEER!
        // First calculate x-velocity in inertial frame
        msg_twist.twist.twist.linear.x = (((wheel_vel[0] + wheel_vel[1]) / 2.0) + ((wheel_vel[2] + wheel_vel[3]) / 2.0)) / 2.0; // UNCOMMENT THIS WHEN MOTOR CONTROLLER IS FIXED
        // msg_twist.linear.x = (((wheel_vel[0] + wheel_vel[1]) / 2.0) + wheel_vel[2]) / 2.0;

        // Now calculate the angular velocity about the z-axis
        msg_twist.twist.twist.angular.z = (((wheel_vel[0] + wheel_vel[1]) / 2.0) - ((wheel_vel[2] + wheel_vel[3]) / 2.0)) / TRACK; // UNCOMMENT THIS WHEN MOTOR CONTROLLER IS FIXED
        // msg_twist.angular.z = (((wheel_vel[0] + wheel_vel[1]) / 2.0) - (wheel_vel[2])) / TRACK;
        std::string str ("base_link");
        msg_twist.header.frame_id = str;
        msg_twist.header.stamp = ros::Time::now();


        twist_pub.publish(msg_twist);  //Publish twist message describing commanded velocity of robot
        joint_pub.publish(msg);
    }
    else
    {
    	std::cout << "feedback timeout!" << std::endl;
    }
    // usleep(period_s * 1000000);
    ros::spinOnce();
    //ros::spin();
    r.sleep();
  }

  // Stop the async callback before returning and deleting objects.
  group->clearFeedbackHandlers();

  sleep(1); // prevent segfaults? (TODO: needed?)

  return 0;
}
